[{"tags":[],"description":{"full":"<p>@api private</p>","summary":"<p>@api private</p>","body":""},"ignore":false,"code":"function NodeRewrite() {\n\tvar rules = [];\n\t\n\tvar minimatch = require('minimatch');\n\n\tfunction matchIt(rule,uri) {\n\t\tif (rule == uri) return true;\n\t\tvar test_rule = rule;\n\t\tif (test_rule.substr(-1) == '*') test_rule += '*';\n\t\tif (minimatch(uri,test_rule)) return true;\n\t\n\t\treturn false;\n\t};\n\n\tfunction rewriteIt(uri,rule) {\n\t\tif (rule.to.indexOf(\"*\") == -1 && rule.to.indexOf(\"{\") == -1) return rule.to;\n\n\t\tvar \turi_segments = uri.split('/').filter(function(val) { return val ? true : false; }),\n\t\t\tfrom_segments = rule.from.split('/').filter(function(val) { return val ? true : false; }),\n\t\t\tto_segments = rule.to.split('/').filter(function(val) { return val ? true : false; }),\n\t\t\tcaps = [],out = [], i = 0, to_seg, from_seg;\n\n\t\twhile (from_segments.length) {\n\t\t\tfrom_seg = from_segments.shift();\n\t\t\n\t\t\tif (from_seg == '*' && from_segments.length) {\n\t\t\t\tcaps.push(uri_segments.shift());\n\t\t\t}\n\t\t\telse if (from_seg == '*' && !from_segments.length) {\n\t\t\t\tcaps.push(uri_segments.join('/'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\turi_segments.shift();\n\t\t\t}\n\t\t}\n\n\t\twhile (to_segments.length) {\n\t\t\tto_seg = to_segments.shift();\n\t\n\t\t\tif (to_seg == '*') {\n\t\t\t\tout.push(caps.shift());\n\t\t\t}\n\t\t\telse if (to_seg.indexOf('{') != -1) {\n\t\t\t\tvar match = /\\{([0-9]+)\\}/.exec(to_seg);\n\t\t\t\tvar ind = parseInt(match[1]) - 1;\n\t\t\t\tout.push(to_seg.replace(match[0],caps[ind]));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tout.push(to_seg);\n\t\t\t} \t\n\t\t}\n\n\t\treturn '/' + out.join('/');\n\t};\n\n\tthis.addRules = function(new_rules) {\n\t\trules = new_rules;\n\t};\n\t\n\tthis.addRule = function(rule) {\n\t\trules.push(rule);\n\t};\n\t\n\tthis.getRules = function() {\n\t\treturn rules;\n\t};\n\n\tthis.clearRules = function() {\n\t\trules = [];\n\t};\n\n\tthis.rewrite = function(uri,callback) {\n\t\tvar i = 0,\n\t\tcount = rules.length;\n\n\t\tif (!count) return callback(uri);\n\n\t\tfunction matchRule() {\n\t\t\tvar rule = rules[i];\n\t\t\n\t\t\tif (matchIt(rule.from,uri)) return callback(rewriteIt(uri,rule));\n\t\t\n\t\t\ti++;\n\n\t\t\tif (i < count) { \n\t\t\t\tprocess.nextTick(matchRule);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn callback(uri);\n\t\t\t}\n\t\t}\n\n\t\tmatchRule();\n\t};\n\n};","ctx":{"type":"function","name":"NodeRewrite","string":"NodeRewrite()"}},{"tags":[{"type":"return","types":["NodeRewrite"],"description":"NodeRewrite instance."},{"type":"api","visibility":"public"}],"description":{"full":"<p>Create a new rewriter instance.</p>\n\n<h2>Examples</h2>\n\n<pre><code>var rw = require('rewrite').create();\nrw.addRule( { from: '/foo' : to : '/bar' });\n\nrw.rewrite('/foo',function(rw_uri) {\n  console.log(rw_uri);\n});\n\n// =&gt; /bar\n</code></pre>","summary":"<p>Create a new rewriter instance.</p>","body":"<h2>Examples</h2>\n\n<pre><code>var rw = require('rewrite').create();\nrw.addRule( { from: '/foo' : to : '/bar' });\n\nrw.rewrite('/foo',function(rw_uri) {\n  console.log(rw_uri);\n});\n\n// =&gt; /bar\n</code></pre>"},"isPrivate":false,"ignore":false,"code":"exports.create = function() { return new NodeRewrite(); };","ctx":{"type":"method","receiver":"exports","name":"create","string":"exports.create()"}}]